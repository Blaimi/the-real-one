### Test Post buildings
POST localhost:9090/api/v2/assets/buildings
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Laputa",
  "address": "The castel in the sky"
}

> {%
    client.test("Building created successfully", function () {
        client.assert(response.status === 201, "Response status is not 201");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("id"), "Body does not contain id key");
        client.assert(body["id"].constructor === String, "Id is not of type string");
        client.global.set("post_building_id", body["id"]);

        client.assert(body.hasOwnProperty("name"), "Body does not contain name key");
        client.assert(body["name"].constructor === String, "Name is not of type string");
        client.assert(body["name"] == "Laputa", "Name should be Laputa");

        client.assert(body.hasOwnProperty("address"), "Body does not contain address key");
        client.assert(body["address"].constructor === String, "Address is not of type string");
        client.assert(body["address"] == "The castel in the sky", "Address should be The castel in the sky");

        const keys = Object.keys(body);
        client.assert(keys.length === 3, `There should only be three key, but actual got ${keys.length}, values: ${keys}`);
    });

%}

### Test Get building endpoint, the building we just created
GET localhost:9090/api/v2/assets/buildings/{{post_building_id}}

> {%
    client.test("Get Building request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("id"), "Body does not contain id key");
        client.assert(body["id"].constructor === String, "Id is not of type string");
        client.assert(body["id"] == client.global.get("post_building_id"), `Id should be ${client.global.get("post_building_id")}`);

        client.assert(body.hasOwnProperty("name"), "Body does not contain name key");
        client.assert(body["name"].constructor === String, "Name is not of type string");
        client.assert(body["name"] == "Laputa", "Name should be Laputa");

        client.assert(body.hasOwnProperty("address"), "Body does not contain address key");
        client.assert(body["address"].constructor === String, "Address is not of type string");
        client.assert(body["address"] == "The castel in the sky", "Address should be The castel in the sky");

        const keys = Object.keys(body);
        client.assert(keys.length == 3, `There should only be three key, but actual got ${keys.length}, values: ${keys}`);
    });
%}

### Test Delete buildings endpoint
DELETE localhost:9090/api/v2/assets/buildings/{{post_building_id}}
Authorization: Bearer {{$auth.token("biletado")}}

> {%
    client.test("Delete Building request executed successfully", function () {
        client.assert(response.status === 204, "Response status is not 204");
    });
%}

### Verify that it got actually deleted
GET localhost:9090/api/v2/assets/buildings/{{post_building_id}}

> {%
    client.test("Get Deleted Building request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("id"), "Body does not contain id key");
        client.assert(body["id"].constructor === String, "Id is not of type string");
        client.assert(body["id"] == client.global.get("post_building_id"), `Id should be ${client.global.get("post_building_id")}`);

        client.assert(body.hasOwnProperty("name"), "Body does not contain name key");
        client.assert(body["name"].constructor === String, "Name is not of type string");
        client.assert(body["name"] == "Laputa", "Name should be Laputa");

        client.assert(body.hasOwnProperty("address"), "Body does not contain address key");
        client.assert(body["address"].constructor === String, "Address is not of type string");
        client.assert(body["address"] == "The castel in the sky", "Address should be The castel in the sky");

        client.assert(body.hasOwnProperty("deleted_at"), "Body does not contain deleted_at key");
        client.assert(body["deleted_at"].constructor === String, "Deleted at is not of type string");

        const keys = Object.keys(body);
        client.assert(keys.length == 4, `There should only be four key, but actual got ${keys.length}, values: ${keys}`);
    });
%}

### Now we restore the building
PUT localhost:9090/api/v2/assets/buildings/{{post_building_id}}
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Dummy",
  "address": "Some street",
  "deleted_at": null
}

> {%
    client.test("Recover Deleted Building request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("id"), "Body does not contain id key");
        client.assert(body["id"].constructor === String, "Id is not of type string");
        client.assert(body["id"] == client.global.get("post_building_id"), `Id should be ${client.global.get("post_building_id")}`);

        client.assert(body.hasOwnProperty("name"), "Body does not contain name key");
        client.assert(body["name"].constructor === String, "Name is not of type string");
        client.assert(body["name"] == "Dummy", "Name should be Dummy");

        client.assert(body.hasOwnProperty("address"), "Body does not contain address key");
        client.assert(body["address"].constructor === String, "Address is not of type string");
        client.assert(body["address"] == "Some street", "Address should be Some street");

        const keys = Object.keys(body);
        client.assert(keys.length == 3, `There should only be three key, but actual got ${keys.length}, values: ${keys}`);
    });
%}

### Let's Test putting a new one instead of recovering, but first create a random uuid and store it
GET localhost:9090

> {%
    // From https://stackoverflow.com/a/21963136
    function broofa() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    client.global.set("put_building_id", broofa());
%}

### Put new building
PUT localhost:9090/api/v2/assets/buildings/{{put_building_id}}
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Other Dummy",
  "address": "Some other street"
}

> {%
    client.test("Put new Building request executed successfully", function () {
        client.assert(response.status === 201, "Response status is not 201");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("id"), "Body does not contain id key");
        client.assert(body["id"].constructor === String, "Id is not of type string");
        client.assert(body["id"] == client.global.get("put_building_id"), `Id should be ${client.global.get("put_building_id")}`);

        client.assert(body.hasOwnProperty("name"), "Body does not contain name key");
        client.assert(body["name"].constructor === String, "Name is not of type string");
        client.assert(body["name"] == "Other Dummy", "Name should be Other Dummy");

        client.assert(body.hasOwnProperty("address"), "Body does not contain address key");
        client.assert(body["address"].constructor === String, "Address is not of type string");
        client.assert(body["address"] == "Some other street", "Address should be Some other street");

        const keys = Object.keys(body);
        client.assert(keys.length == 3, `There should only be three key, but actual got ${keys.length}, values: ${keys}`);
    });
%}

### Now lets delete it, so that we can test the include_deleted flag
DELETE localhost:9090/api/v2/assets/buildings/{{put_building_id}}
Authorization: Bearer {{$auth.token("biletado")}}

### Test getting buildings without deleted ones
GET localhost:9090/api/v2/assets/buildings

> {%
    client.test("Get all none deleted Buildings request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("buildings"), "Body does not contain buildings key");
        client.assert(body["buildings"].constructor === Array, "Buildings is not of type array");
        for (let i = 0; i < body["buildings"].length; i++) {
            let building = body["buildings"][i];
            if (building["id"] == client.global.get("post_building_id")) {
                client.assert(building.hasOwnProperty("id"), "Body does not contain id key");
                client.assert(building["id"].constructor === String, "Id is not of type string");
                client.assert(building["id"] == client.global.get("post_building_id"), `Id should be ${client.global.get("post_building_id")}`);

                client.assert(building.hasOwnProperty("name"), "Body does not contain name key");
                client.assert(building["name"].constructor === String, "Name is not of type string");
                client.assert(building["name"] == "Dummy", "Name should be Dummy");

                client.assert(building.hasOwnProperty("address"), "Body does not contain address key");
                client.assert(building["address"].constructor === String, "Address is not of type string");
                client.assert(building["address"] == "Some street", "Address should be Some street");

                const keys = Object.keys(building);
                client.assert(keys.length == 3, `There should only be three key, but actual got ${keys.length}, values: ${keys}`);
            }

            if (building["id"] == client.global.get("put_building_id")) {
                client.assert(false, `Building with id ${building["id"]} should not be present, since it is deleted`);
            }
        }
    });
%}

### Test getting buildings with deleted ones
GET localhost:9090/api/v2/assets/buildings?include_deleted=true

> {%
    client.test("Get all Buildings with deleted one request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("buildings"), "Body does not contain buildings key");
        client.assert(body["buildings"].constructor === Array, "Buildings is not of type array");
        for (let i = 0; i < body["buildings"].length; i++) {
            let building = body["buildings"][i];
            if (building["id"] == client.global.get("post_building_id")) {
                client.assert(building.hasOwnProperty("id"), "Body does not contain id key");
                client.assert(building["id"].constructor === String, "Id is not of type string");
                client.assert(building["id"] == client.global.get("post_building_id"), `Id should be ${client.global.get("post_building_id")}`);

                client.assert(building.hasOwnProperty("name"), "Body does not contain name key");
                client.assert(building["name"].constructor === String, "Name is not of type string");
                client.assert(building["name"] == "Dummy", "Name should be Dummy");

                client.assert(building.hasOwnProperty("address"), "Body does not contain address key");
                client.assert(building["address"].constructor === String, "Address is not of type string");
                client.assert(building["address"] == "Some street", "Address should be Some street");

                let keys = Object.keys(building);
                client.assert(keys.length == 3, `There should only be three key, but actual got ${keys.length}, values: ${keys}`);
            }

            if (building["id"] == client.global.get("put_building_id")) {
                client.assert(building.hasOwnProperty("id"), "Body does not contain id key");
                client.assert(building["id"].constructor === String, "Id is not of type string");
                client.assert(building["id"] == client.global.get("put_building_id"), `Id should be ${client.global.get("put_building_id")}`);

                client.assert(building.hasOwnProperty("name"), "Body does not contain name key");
                client.assert(building["name"].constructor === String, "Name is not of type string");
                client.assert(building["name"] == "Other Dummy", "Name should be Other Dummy");

                client.assert(building.hasOwnProperty("address"), "Body does not contain address key");
                client.assert(building["address"].constructor === String, "Address is not of type string");
                client.assert(building["address"] == "Some other street", "Address should be Some other street");

                client.assert(building.hasOwnProperty("deleted_at"), "Body does not contain deleted at key");
                client.assert(building["deleted_at"].constructor === String, "Deleted at is not of type string");

                let keys = Object.keys(building);
                client.assert(keys.length == 4, `There should only be four key, but actual got ${keys.length}, values: ${keys}`);
            }
        }
    });
%}

### Lets test a normal replace of an existing building
PUT localhost:9090/api/v2/assets/buildings/{{post_building_id}}
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "New New Building",
  "address": "Some Random address"
}

> {%
    client.test("Normal building put request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("id"), "Body does not contain id key");
        client.assert(body["id"].constructor === String, "Id is not of type string");
        client.assert(body["id"] == client.global.get("post_building_id"), `Id should be ${client.global.get("post_building_id")}`);

        client.assert(body.hasOwnProperty("name"), "Body does not contain name key");
        client.assert(body["name"].constructor === String, "Name is not of type string");
        client.assert(body["name"] == "New New Building", "Name should be New New Building");

        client.assert(body.hasOwnProperty("address"), "Body does not contain address key");
        client.assert(body["address"].constructor === String, "Address is not of type string");
        client.assert(body["address"] == "Some Random address", "Address should be Some Random address");

        const keys = Object.keys(body);
        client.assert(keys.length == 3, `There should only be three key, but actual got ${keys.length}, values: ${keys}`);
    });
%}

### Lets verify the put with a get
GET localhost:9090/api/v2/assets/buildings/{{post_building_id}}

> {%
    client.test("Get all none deleted Storeys for a specific building request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("id"), "Body does not contain id key");
        client.assert(body["id"].constructor === String, "Id is not of type string");
        client.assert(body["id"] == client.global.get("post_building_id"), `Id should be ${client.global.get("post_building_id")}`);

        client.assert(body.hasOwnProperty("name"), "Body does not contain name key");
        client.assert(body["name"].constructor === String, "Name is not of type string");
        client.assert(body["name"] == "New New Building", "Name should be New New Building");

        client.assert(body.hasOwnProperty("address"), "Body does not contain address key");
        client.assert(body["address"].constructor === String, "Address is not of type string");
        client.assert(body["address"] == "Some Random address", "Address should be Some Random address");

        const keys = Object.keys(body);
        client.assert(keys.length == 3, `There should only be three key, but actual got ${keys.length}, values: ${keys}`);
    });
%}