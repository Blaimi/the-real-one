### Posting with a none existing storey id
POST localhost:9090/api/v2/assets/rooms
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Valid",
  "storey_id": "a90f2327-6add-429b-ba56-3a39c30d2f80"
}

> {%
    client.test("Post Room with none existing storey id request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Getting a none existing room
GET localhost:9090/api/v2/assets/rooms/cea29729-f5ff-4b20-9711-ccaa225a80ef

> {%
    client.test("Get none existing Room request executed successfully", function () {
        client.assert(response.status === 404, "Response status is not 404");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Putting with a none existing storey id
PUT localhost:9090/api/v2/assets/rooms/56ed64dc-322d-43c4-aad3-795f7225a475
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Valid",
  "storey_id": "a90f2327-6add-429b-ba56-3a39c30d2f80"
}

> {%
    client.test("Put Room with none existing storey id request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Deleting a none existing room
DELETE localhost:9090/api/v2/assets/rooms/cea29729-f5ff-4b20-9711-ccaa225a80ef
Authorization: Bearer {{$auth.token("biletado")}}

> {%
    client.test("Delete none existing Room request executed successfully", function () {
        client.assert(response.status === 404, "Response status is not 404");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}