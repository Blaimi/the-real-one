### Posting a building with null name arguments
POST localhost:9090/api/v2/assets/buildings
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": null,
  "address": "Valid"
}

> {%
    client.test("Post new Building with null name argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Posting a building without valid name arguments
POST localhost:9090/api/v2/assets/buildings
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "\n  sdaf  sdaf",
  "address": "Valid"
}

> {%
    client.test("Post new Building without valid name argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Posting a building without valid name json type argument
POST localhost:9090/api/v2/assets/buildings
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": [],
  "address": "Valid"
}

> {%
    client.test("Post new Building without valid name json type argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Posting a building with null address arguments
POST localhost:9090/api/v2/assets/buildings
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Valid",
  "address": null
}

> {%
    client.test("Post new Building with null address argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Posting a building without valid address arguments
POST localhost:9090/api/v2/assets/buildings
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Valid",
  "address": "\n  asd asdass  asdasd\n\n"
}

> {%
    client.test("Post new Building without valid address argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Posting a building without valid address json type argument
POST localhost:9090/api/v2/assets/buildings
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Valid",
  "address": []
}

> {%
    client.test("Post new Building without valid address json type argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Getting a building without valid building id
GET localhost:9090/api/v2/assets/buildings/invalid

> {%
    client.test("Get Building without valid building id request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Putting a building without valid building id
PUT localhost:9090/api/v2/assets/buildings/invalid
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Valid",
  "address": "Valid"
}

> {%
    client.test("Put Building without valid building id request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Putting a building with null name arguments
PUT localhost:9090/api/v2/assets/buildings/e178d8cd-d8d8-4f62-9293-27342cc2335b
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": null,
  "address": "Valid"
}

> {%
    client.test("Putting Building with null name argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Putting a building without valid name arguments
PUT localhost:9090/api/v2/assets/buildings/e178d8cd-d8d8-4f62-9293-27342cc2335b
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "\n  sdaf  sdaf",
  "address": "Valid"
}

> {%
    client.test("Put Building without valid name argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Putting a building without valid name json type argument
PUT localhost:9090/api/v2/assets/buildings/e178d8cd-d8d8-4f62-9293-27342cc2335b
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": [],
  "address": "Valid"
}

> {%
    client.test("Put Building without valid name json type argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Putting a building with null address arguments
PUT localhost:9090/api/v2/assets/buildings/e178d8cd-d8d8-4f62-9293-27342cc2335b
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Valid",
  "address": null
}

> {%
    client.test("Put Building with null address argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Putting a building without valid address arguments
PUT localhost:9090/api/v2/assets/buildings/e178d8cd-d8d8-4f62-9293-27342cc2335b
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Valid",
  "address": "\n  asd asdass  asdasd\n\n"
}

> {%
    client.test("Put Building without valid address argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Putting a building without valid address json type argument
PUT localhost:9090/api/v2/assets/buildings/e178d8cd-d8d8-4f62-9293-27342cc2335b
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Valid",
  "address": []
}

> {%
    client.test("Put Building without valid address json type argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Putting a building without valid deleted at value
PUT localhost:9090/api/v2/assets/buildings/e178d8cd-d8d8-4f62-9293-27342cc2335b
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Valid",
  "address": "Valid",
  "deleted_at": "Invalid"
}

> {%
    client.test("Put Building without valid deleted at argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Putting a building without valid deleted at json type argument
PUT localhost:9090/api/v2/assets/buildings/e178d8cd-d8d8-4f62-9293-27342cc2335b
Content-Type: application/json
Authorization: Bearer {{$auth.token("biletado")}}

{
  "name": "Valid",
  "address": "Valid",
  "deleted_at": []
}

> {%
    client.test("Put Building without valid deleted at json type argument request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}

### Deleting a building without valid building id
DELETE localhost:9090/api/v2/assets/buildings/invalid
Authorization: Bearer {{$auth.token("biletado")}}

> {%
    client.test("Delete Building without valid building id request executed successfully", function () {
        client.assert(response.status === 400, "Response status is not 400");

        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json", `Expected Content-Type is application/json, but actual is ${contentType}`);

        const body = response.body;
        client.assert(body.hasOwnProperty("errors"), "Body does not contain errors key");
        client.assert(body["errors"].constructor === Array, "Errors is not of type array");

        client.assert(body.hasOwnProperty("trace"), "Body does not contain trace key");
        client.assert(body["trace"].constructor === String, "Trace is not of type string");
    });
%}